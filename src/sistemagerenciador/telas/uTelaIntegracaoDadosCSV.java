/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package sistemagerenciador.telas;
import java.sql.ResultSet;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sistemagerenciador.dal.ConexaoBD;
/**
 *
 * @author giorg
 */
public class uTelaIntegracaoDadosCSV extends javax.swing.JInternalFrame {

    /**
     * Creates new form uTelaIntegracaoDadosCSV
     */
    public uTelaIntegracaoDadosCSV() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btExporta = new javax.swing.JButton();
        btImporta = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbIntegracaoDadosCSV = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Integração de dados CSV");
        setName("fmIntegracaoCSV"); // NOI18N

        btExporta.setText("Exportar");
        btExporta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btExportaActionPerformed(evt);
            }
        });

        btImporta.setText("Importar");
        btImporta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btImportaActionPerformed(evt);
            }
        });

        tbIntegracaoDadosCSV.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbIntegracaoDadosCSV);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btImporta)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btExporta))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btExporta)
                    .addComponent(btImporta))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btImportaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btImportaActionPerformed
        String path = "";
        try {
            path = new File(".").getCanonicalPath();
        } catch (Exception e) {
            Logger.getLogger(uTelaIntegracaoDadosCSV.class.getName()).log(Level.SEVERE, null, e);          
        }
        File fileCSV = new File(path+"/tabela.csv");
        try {
            // Abre o arquivo CSV para leitura
            BufferedReader br = new BufferedReader(new FileReader(fileCSV));
            // Lê a primeira linha do arquivo CSV
            String firstLine = br.readLine().trim();
            // Divide a primeira linha em nomes de colunas usando vírgula como delimitador
            String[] columnsName = firstLine.split(",");
            // Obtém o modelo da tabela e define os nomes das colunas
            DefaultTableModel model = (DefaultTableModel)tbIntegracaoDadosCSV.getModel();
            model.setColumnIdentifiers(columnsName);
            
            // Lê as linhas restantes do arquivo e as armazena em um array de objetos
            Object[] tableLines = br.lines().toArray();
            
            // Itera sobre as linhas e adiciona cada uma à tabela
            for(int i = 0; i < tableLines.length; i++) {
                String line = tableLines[i].toString().trim(); 
                String[] dataRow = line.split(",");
                model.addRow(dataRow);
                
                // Chama a função para inserir os dados no banco de dados
                insertDataBase(dataRow);
            }
            JOptionPane.showMessageDialog(null, "Importado com sucesso!");
            br.close();
        } catch (Exception e) {
            Logger.getLogger(uTelaIntegracaoDadosCSV.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btImportaActionPerformed

    private void btExportaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btExportaActionPerformed
        String path = "";
        try {
            path = new File(".").getCanonicalPath();
        } catch (Exception e) {
            Logger.getLogger(uTelaIntegracaoDadosCSV.class.getName()).log(Level.SEVERE, null, e);          
        }
        File fileCSV = new File(path+"/tabela.csv");
        try {
            FileWriter fw = new FileWriter(fileCSV);
            BufferedWriter bw = new BufferedWriter(fw);

            Connection conexao = ConexaoBD.conector(); 
            if (conexao == null) {
                System.err.println("Erro ao conectar ao banco de dados");
                return;
            }

            PreparedStatement pst = conexao.prepareStatement("SELECT * FROM TDADOS");
            ResultSet rs = pst.executeQuery();

            // Escreve os dados no arquivo CSV
            while (rs.next()) {
                // Recupera os valores de cada coluna do resultado da consulta
                for (int i = 1; i <= rs.getMetaData().getColumnCount(); i++) {
                    bw.write(rs.getString(i) + ", ");
                }
                bw.newLine();
            }

            JOptionPane.showMessageDialog(null, "Exportado com sucesso!");
            bw.close();
            fw.close();
            pst.close();
            conexao.close(); 
        } catch (IOException | SQLException e) {
            Logger.getLogger(uTelaIntegracaoDadosCSV.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btExportaActionPerformed
 
    //Método para inserção no banco de dados
    private void insertDataBase(String[] dataRow) {
        try {
            Connection conexao = ConexaoBD.conector(); 

            if (conexao == null) {
                System.err.println("Erro ao conectar ao banco de dados");
                return;
            }

            PreparedStatement pst = conexao.prepareStatement("INSERT INTO TDADOS (TCOD_DADO, TCATEGORIA_DADO, TGENERO_DADO, TPARTICIPANTE_DADO, TMIDIA_DADO, TTIPO_MIDIA_DADO, TCLASSIFICACAO_DADO) VALUES (?, ?, ?, ?, ?, ?, ?)");

            //É posto valores aonde há "?"
            for(int i = 0; i < dataRow.length; i++) {
                pst.setString(i + 1, dataRow[i]);
            }

            pst.executeUpdate(); 
            pst.close(); 
            conexao.close(); 
        } catch (SQLException e) {
            Logger.getLogger(uTelaIntegracaoDadosCSV.class.getName()).log(Level.SEVERE, null, e);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btExporta;
    private javax.swing.JButton btImporta;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbIntegracaoDadosCSV;
    // End of variables declaration//GEN-END:variables
}
